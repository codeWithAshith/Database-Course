a trigger is a stored program invoked automatically in response to an event such as insert, update, or delete that occurs in the associated table. 
For example, you can define a trigger that is invoked automatically before a new row is inserted into a table.

MySQL supports triggers that are invoked in response to the INSERT, UPDATE or DELETE event.

The SQL standard defines two types of triggers: row-level triggers and statement-level triggers.

A row-level trigger is activated for each row that is inserted, updated, or deleted.  
For example, if a table has 100 rows inserted, updated, or deleted, the trigger is automatically invoked 100 times for the 100 rows affected.
A statement-level trigger is executed once for each transaction regardless of how many rows are inserted, updated, or deleted.

Advantages of triggers
-Triggers provide another way to check the integrity of data.
-Triggers handle errors from the database layer.
-Triggers give an alternative way to run scheduled tasks. 
 By using triggers, you don’t have to wait for the scheduled events to run because the triggers are invoked automatically before or after a change is made to the data in a table.
-Triggers can be useful for auditing the data changes in tables.

Disadvantages of triggers
-Triggers can only provide extended validations, not all validations. For simple validations, you can use the NOT NULL, UNIQUE, CHECK and FOREIGN KEY constraints.
-Triggers can be difficult to troubleshoot because they execute automatically in the database, which may not invisible to the client applications.
-Triggers may increase the overhead of the MySQL Server.

Managing MySQL triggers
Create triggers  – describe steps of how to create a trigger in MySQL.
Drop triggers – show you how to drop a trigger.
Create a BEFORE INSERT trigger – show you how to create a BEFORE INSERT trigger to maintain a summary table from another table.
Create an AFTER INSERT trigger – describe how to create an AFTER INSERT trigger to insert data into a table after inserting data into another table.
Create a BEFORE UPDATE trigger – learn how to create a BEFORE UPDATE trigger that validates data before it is updated to the table.
Create an AFTER UPDATE trigger – show you how to create an AFTER UPDATE trigger to log the changes of data in a table.
Create a BEFORE DELETE trigger – show how to create a BEFORE DELETE trigger.
Create an AFTER DELETE trigger – describe how to create an AFTER DELETE trigger.
Create multiple triggers for a table that have the same trigger event and time – MySQL 8.0 allows you to define multiple triggers for a table that have the same trigger event and time.
Show triggers – list triggers in a database, table by specific patterns.

-- CREATE TRIGGER --

First, create a new table named employees_audit to keep the changes to the employees table:

CREATE TABLE employees_audit (
    id INT AUTO_INCREMENT PRIMARY KEY,
    employeeNumber INT NOT NULL,
    lastname VARCHAR(50) NOT NULL,
    changedat DATETIME DEFAULT NULL,
    action VARCHAR(50) DEFAULT NULL
);

Next, create a BEFORE UPDATE trigger that is invoked before a change is made to the employees table.

CREATE TRIGGER before_employee_update 
    BEFORE UPDATE ON employees
    FOR EACH ROW 
 INSERT INTO employees_audit
 SET action = 'update',
     employeeNumber = OLD.employeeNumber,
     lastname = OLD.lastname,
     changedat = NOW();
     
Inside the body of the trigger, we used the OLD keyword to access values of the columns employeeNumber and lastname of the row affected by the trigger.
     
SHOW TRIGGERS;

After that, update a row in the employees table:

UPDATE employees 
SET 
    lastName = 'Phan'
WHERE
    employeeNumber = 1056;
    
Finally, query the employees_audit table to check if the trigger was fired by the UPDATE statement:
    
SELECT * FROM employees_audit;

-- DROP TRIGGER --

The DROP TRIGGER statement deletes a trigger from the database.

Here is the basic syntax of the DROP TRIGGER statement:

First, create a table called billings for demonstration:

CREATE TABLE billings (
    billingNo INT AUTO_INCREMENT,
    customerNo INT,
    billingDate DATE,
    amount DEC(10 , 2 ),
    PRIMARY KEY (billingNo)
);
Code language: SQL (Structured Query Language) (sql)
Second, create a new trigger called BEFORE UPDATE that is associated with the billings table:

DELIMITER $$
CREATE TRIGGER before_billing_update
    BEFORE UPDATE 
    ON billings FOR EACH ROW
BEGIN
    IF new.amount > old.amount * 10 THEN
        SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = 'New amount cannot be 10 times greater than the current amount.';
    END IF;
END$$    
DELIMITER ;
Code language: SQL (Structured Query Language) (sql)
If you are not familiar with the DELIMITER statement, check it out here in the stored procedure statement.

The trigger activates before any update. If the new amount is 10 times greater than the current amount, the trigger raises an error.

Third, show the triggers:

SHOW TRIGGERS;

Fourth, drop the before_billing_update trigger:

DROP TRIGGER before_billing_update;
Code language: SQL (Structured Query Language) (sql)
Finally, show the triggers again to verify the removal:

SHOW TRIGGERS;












