What is Indexing?

Let me explain the whole concept of indexing intuitively. 
It’s named ‘indexing’ because of how an index works in a book. 
If you’re reading a book on statistics and you want to read about ‘linear regression’, 
you’ll not want to flip hundreds of pages one by one, to get to the chapter which talks about ‘linear regression’.

Instead, you’ll open the index page, look for ‘linear regression’ and go to the page directly.

This is the technique that databases use via indexing. When you create an index, 
the database somehow rapidly finds the data that the query wants. I’ll talk about this ‘somehow’ later in the article.

When to use and when not to use Indexing?
Indexes speed up the performance of a database. And as the database gets larger, indexes become even more useful.

But there are two important things you should remember:

Indexes require storage
When you add data to the database, the original table is updated first, and then all the indexes of that table are updated

Types of Indexing
Let me touch upon the two types of database indexes briefly, to give you a comprehensive understanding of the topic:

1. Clustered

2. Non-clustered

Clustered Indexes

A clustered index is the unique index of the table that uses the primary key to organize the data within the table.
A clustered index doesn’t have to be explicitly declared but is created by default when the primary key is defined. 
The primary key sorted in ascending order is used as the clustered index, by default.

Non-clustered Index

A non-clustered index is stored in one place and the physical data in the table is stored in another place. 
It’s like the index page of a book, that we talked about earlier. 
The index page of the book is located in one place and the contents of the book are located in another. 
This allows for more than one non-clustered index per table, as we saw earlier.

--CREATE INDEX--

You create indexes for a table at the time of creation. 
For example, the following statement creates a new table with an index that consists of two columns c2 and c3.

SELECT 
    employeeNumber, 
    lastName, 
    firstName
FROM
    employees
WHERE
    jobTitle = 'Sales Rep';

Now, let’s create an index for the  jobTitle column by using the CREATE INDEX statement:

CREATE INDEX jobTitle ON employees(jobTitle);
Code language: SQL (Structured Query Language) (sql)
And execute the above statement again:

EXPLAIN SELECT 
    employeeNumber, 
    lastName, 
    firstName
FROM
    employees
WHERE
    jobTitle = 'Sales Rep';

    
--DROP INDEX--

To remove an existing index from a table, you use the DROP INDEX statement as follows:
    
CREATE TABLE leads(
    lead_id INT AUTO_INCREMENT,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(255) NOT NULL,
    information_source VARCHAR(255),
    INDEX name(first_name,last_name),
    UNIQUE email(email),
    PRIMARY KEY(lead_id)
);

The following statement removes the name index from the leads table:

DROP INDEX name ON leads;
    
