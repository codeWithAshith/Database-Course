USE SAMPLE DB


---WHERE---

The WHERE clause can be used within an SQL statement to narrow the result set down to a given set of criteria.

// to find all employees whose job titles are Sales Rep
SELECT 
    lastname, 
    firstname, 
    jobtitle
FROM
    employees
WHERE
    jobtitle = 'Sales Rep';
    
// to find employees whose job titles are Sales Rep and office codes are 1
SELECT 
    lastname, 
    firstname, 
    jobtitle,
    officeCode
FROM
    employees
WHERE
    jobtitle = 'Sales Rep' AND 
    officeCode = 1;
    
// to finds employees whose job title is Sales Rep or employees who locate the office with office code 1 
SELECT 
    lastName, 
    firstName, 
    jobTitle, 
    officeCode
FROM
    employees
WHERE
    jobtitle = 'Sales Rep' OR 
    officeCode = 1;
    
// to find employees who locate in offices whose office code is from 1 to 3
SELECT 
    firstName, 
    lastName, 
    officeCode
FROM
    employees
WHERE
    officeCode BETWEEN 1 AND 3;
    
// to find the employees whose last names end with the string 'son'   
SELECT 
    firstName, 
    lastName
FROM
    employees
WHERE
    lastName LIKE '%son'
ORDER BY firstName;

// to find employees who locate in the office with office code 1
SELECT 
    firstName, 
    lastName, 
    officeCode
FROM
    employees
WHERE
    officeCode IN (1 , 2, 3);
    
// to get the rows with the values in the reportsTo column are NULL
SELECT 
    lastName, 
    firstName, 
    reportsTo
FROM
    employees
WHERE
    reportsTo IS NULL;
    
// to find all employees who are not the Sales Rep
SELECT 
    lastname, 
    firstname, 
    jobtitle
FROM
    employees
WHERE
    jobtitle <> 'Sales Rep';
    
// to find employees with office code less than or equal to 4
SELECT 
    lastname, 
    firstname, 
    officeCode
FROM
    employees
WHERE 
    officecode <= 4;
    
    
---DISTINCT---
    
The DISTINCT keyword can be used within an SQL statement to remove duplicate rows from the result set of a query.

// To remove duplicate rows from the result set of a query
SELECT 
    DISTINCT lastname
FROM
    employees;

// o get a unique combination of city and state from the customers table
SELECT DISTINCT
    state, city
FROM
    customers
WHERE
    state IS NOT NULL
ORDER BY 
    state, 
    city;
    
---GROUP BY---

The GROUP BY clause groups the returned record set by one or more columns. You specify which columns the result set is grouped by.

// to group values of the orderâ€™s status into subgroups
SELECT 
    status
FROM
    orders
GROUP BY status;

// to know the number of orders in each status
SELECT 
    status, COUNT(*)
FROM
    orders
GROUP BY status;

---HAVING---

The HAVING clause can be used as a filter on a GROUP BY clause. It is used to apply a filter to a group of rows or aggregates. 
This is in contrast to the WHERE clause, which is applied before the GROUP BY clause.

// To get order numbers, the number of items sold per order, and total sales for each from the orderdetails table
SELECT 
    ordernumber,
    SUM(quantityOrdered) AS itemsCount,
    SUM(priceeach*quantityOrdered) AS total
FROM
    orderdetails
GROUP BY ordernumber;

// to find which order has total sales greater than 1000 by using the HAVING clause
SELECT 
    ordernumber,
    SUM(quantityOrdered) AS itemsCount,
    SUM(priceeach*quantityOrdered) AS total
FROM
    orderdetails
GROUP BY 
   ordernumber
HAVING 
   total > 1000;

---ORDER BY---

The ORDER BY clause can be used within an SQL statement to sort the result set by one or more fields.

// to sort the customers by their last names in ascending order
SELECT
	contactLastname,
	contactFirstname
FROM
	customers
ORDER BY
	contactLastname;

// to sort customers by the last name in descending order
SELECT
	contactLastname,
	contactFirstname
FROM
	customers
ORDER BY
	contactLastname DESC;

// to sort the customers by the last name in descending order and then by the first name in ascending order
SELECT 
    contactLastname, 
    contactFirstname
FROM
    customers
ORDER BY 
	contactLastname DESC , 
	contactFirstname ASC;
	
// to calculate the subtotal for each line item and sorts the result set based on the subtotal
SELECT 
    orderNumber, 
    orderlinenumber, 
    quantityOrdered * priceEach
FROM
    orderdetails
ORDER BY 
   quantityOrdered * priceEach DESC;
